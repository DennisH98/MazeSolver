
public class MainTester {
	
	int RobotDirection=0; // 0=North, 1=East, 2=South, 3=West

	// Start in the 0,0 Cell
	int StartPosRow=0; // Starting position
	int StartPosCol=0;

	int CurrentPosRow=StartPosRow; // Starting position
	int CurrentPosCol=StartPosCol;

	int TargetPosRow=3;
	int TargetPosCol=5;
	
	Cell Grid[][] = new Cell[4][6];

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		MainTester test = new MainTester();
		
		test.GridInit();
		test.WallGen();
		test.MazeMap(test.RobotDirection, test.CurrentPosRow, test.CurrentPosCol);
		
		/*
		for(int i=0;i<4;i++){
			for(int j=0;j<6;j++){
				
				System.out.print(test.Grid[i][j].visited);
				
			}
			System.out.println();
		}
		*/
		
		
		
	}
	
	int MazeMap(int position, int row, int col){

		//needs to turn first
		//Grid[row][col].visited=1;
		
		if(row==TargetPosRow && col == TargetPosCol) {
			Grid[row][col].visited= 1;
			return 1;
		}else {
			
			
		

		if(Grid[row][col].NorthWall ==0 && position != 2){//&&not visted
		 //go north
			//if(row==TargetPosRow && col == TargetPosCol) {
				//found
			//}else {
				//Grid[row][col].visited=1;
			if(position == 1) {//east
				position=0;
			}else if(position ==3) {
				position = 0;
			}
			
			
			System.out.println("Im north before recursion");
				Grid[row][col].visited= MazeMap(position , row+1 , col);
				System.out.println("Im north after recursion");	
				return MazeMap(position , row+1 , col);
			//}
			
		}

		if(Grid[row][col].EastWall ==0 && position !=3 ){
		 //go east
			
			if(position == 0) {//east
				position=1;
			}else if(position ==2) {
				position = 1;
			}
			
			System.out.println("Im East before recursion");
			Grid[row][col].visited= MazeMap(position , row , col+1 );//?
			System.out.println("Im East after recursion");
			return MazeMap(position , row , col+1 );
		}

		if(Grid[row][col].SouthWall ==0 && position !=0 ){
			
		 //go south
			if(position == 1) {//east
				position=2;
			}else if(position ==3) {
				position = 2;
			}
			
			System.out.println("Im South before recursion");
			
			Grid[row][col].visited= MazeMap(position , row-1 , col);
			System.out.println("Im South after recursion");
			return MazeMap(position , row-1 , col);
		}

		if(Grid[row][col].WestWall ==0 && position != 1  ){
		 //go west
			if(position == 0) {//east
				position=3;
			}else if(position ==2) {
				position = 3;
			}
			
			System.out.println("Im West before recursion");
			Grid[row][col].visited=MazeMap(position , row , col-1);//?
			System.out.println("Im West after recursion");
			return MazeMap(position , row , col-1);//? too much
		}
		
		return 0;
		
		}

		}
	
	
	void GridInit(){
		for(int i=0;i<4;i++){
			for(int j=0;j<6;j++){
				
				Grid[i][j]= new Cell();
				Grid[i][j].NorthWall=0;
				Grid[i][j].EastWall=0;
				Grid[i][j].WestWall=0;
				Grid[i][j].SouthWall=0;
			}
		}
	}
	
	void WallGen(){
		int i=0;
		int j=0;

		for(i=0;i<4;i++){
			Grid[i][0].WestWall=1;
			Grid[i][5].EastWall=1;
		}

		for(j=0;j<6;j++){
			Grid[0][j].SouthWall=1;
			Grid[3][j].NorthWall=1;
		}
	  //Row 1
		Grid[0][1].NorthWall = 1;
		Grid[0][1].EastWall = 1;
		Grid[0][2].WestWall =1;
		Grid[0][2].EastWall =1;
		Grid[0][3].WestWall =1;
		//Row 2
		Grid[1][0].NorthWall =1;
		Grid[1][1].SouthWall =1;
		Grid[1][3].NorthWall =1;
		Grid[1][3].EastWall =1;
		Grid[1][4].WestWall=1;
		Grid[1][4].SouthWall=1;
		Grid[1][5].NorthWall=1;
		//Row 3
		Grid[2][0].SouthWall =1;
		Grid[2][0].EastWall =1;
		Grid[2][1].WestWall = 1;
		Grid[2][1].EastWall =1;
		Grid[2][2].WestWall =1;
		Grid[2][3].NorthWall =1;
	  Grid[2][3].SouthWall =1;
	  Grid[2][5].NorthWall =1;
	  Grid[2][5].SouthWall =1;
	  //Row 4
	  Grid[3][1].EastWall =1;
	  Grid[3][2].WestWall =1;
	  Grid[3][3].SouthWall=1;
	  Grid[3][3].EastWall=1;
	  Grid[3][4].WestWall=1;
	  Grid[3][5].SouthWall=1;

	}

	
	

}
